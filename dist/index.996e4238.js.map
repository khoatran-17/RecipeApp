{"mappings":"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","sources":["./src/js/Search.js","./src/js/base.js","./src/js/searchView.js","./src/js/Recipe.js","./src/js/recipeView.js","./src/js/Like.js","./src/js/likeView.js","./src/js/userRecipe.js","./src/js/userRecipeView.js","./src/js/index.js"],"sourcesContent":["import { key } from './config';\r\n\r\nexport default class Search {\r\n  constructor(query) {\r\n    this.query = query;\r\n  }\r\n\r\n  async getResults() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://forkify-api.herokuapp.com/api/v2/recipes?search=${this.query}&key=${key}`\r\n      );\r\n\r\n      const data = await res.json();\r\n\r\n      // console.log(res);\r\n      // console.log(data);\r\n\r\n      this.results = data.data.recipes;\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n}\r\n","export const elements = {\r\n  searchForm: document.querySelector('.search'),\r\n  searchInput: document.querySelector('.search__field'),\r\n  searchResultList: document.querySelector('.results__list'),\r\n  searchResult: document.querySelector('.results'),\r\n  searchResultPages: document.querySelector('.results__pages'),\r\n  recipe: document.querySelector('.recipe'),\r\n  likeIcon: document.querySelector('.recipe__love'),\r\n  likeMenu: document.querySelector('.likes__field'),\r\n  likeList: document.querySelector('.likes__list'),\r\n  addRecipeBtn: document.querySelector('.nav__btn--add-recipe'),\r\n  recipeWindow: document.querySelector('.add-recipe-window'),\r\n  recipeOverlay: document.querySelector('.overlay'),\r\n  closeUserRecipe: document.querySelector('.btn--close'),\r\n  userRecipeForm: document.querySelector('.upload'),\r\n  userList: document.querySelector('.user__list'),\r\n  allInputs: document.querySelectorAll('.upload__column input'),\r\n};\r\n\r\nexport const elementStrings = {\r\n  loader: 'loader',\r\n  btn_inline: 'btn-inline',\r\n  resultsLink: 'results__link',\r\n  resultsLinkActive: 'results__link--active',\r\n};\r\n\r\nexport const renderLoader = (parent) => {\r\n  const loader = `\r\n    <div class=\"${elementStrings.loader}\">\r\n      <i class='bx bx-loader-circle' ></i>\r\n    </div>\r\n    `;\r\n  parent.insertAdjacentHTML('afterbegin', loader);\r\n};\r\n\r\nexport const clearLoader = () => {\r\n  const loader = document.querySelector(`.${elementStrings.loader}`);\r\n  if (loader) {\r\n    loader.parentElement.removeChild(loader);\r\n  }\r\n};\r\n","import { elements, elementStrings } from './base';\r\n\r\nexport const getInput = () => elements.searchInput.value;\r\n\r\nexport const clearInput = () => {\r\n  elements.searchInput.value = '';\r\n};\r\n\r\nexport const clearResults = () => {\r\n  elements.searchResultList.innerHTML = '';\r\n  elements.searchResultPages.innerHTML = '';\r\n};\r\n\r\nexport const highlightSelected = (id) => {\r\n  const resultsArr = Array.from(document.querySelectorAll(`.${elementStrings.resultsLink}`));\r\n  resultsArr.forEach((el) => el.classList.remove(elementStrings.resultsLinkActive));\r\n\r\n  document\r\n    .querySelector(`.results__link[href=\"#${id}\"]`)\r\n    .classList.add(elementStrings.resultsLinkActive);\r\n};\r\n\r\nexport const limitTitle = (title, limit = 25) => {\r\n  const newTitle = [];\r\n  if (title.length > limit) {\r\n    title.split(' ').reduce((acc, curr) => {\r\n      if (acc + curr.length <= limit) {\r\n        newTitle.push(curr);\r\n      }\r\n      return acc + curr.length;\r\n    }, 0);\r\n\r\n    return `${newTitle.join(' ')} ...`;\r\n  }\r\n  return title;\r\n};\r\n\r\nconst createButton = (page, type) => {\r\n  let buttonMarkup;\r\n\r\n  if (type === 'hidden') {\r\n    buttonMarkup = `<button class=\"${elementStrings.btn_inline} results__btn--hidden\">\r\n                      <span>HiddenBtn</span>\r\n                    </button>`;\r\n  } else {\r\n    buttonMarkup = `<button class=\"${elementStrings.btn_inline} results__btn--${type}\" data-goto=${\r\n      type === 'prev' ? page - 1 : page + 1\r\n    }>\r\n              <span>Page ${type === 'prev' ? page - 1 : page + 1}</span>\r\n\r\n              <i class='bx bxs-skip-${\r\n                type === 'prev' ? 'previous' : 'next'\r\n              }-circle search__icon' ></i>\r\n          </button>\r\n`;\r\n  }\r\n\r\n  return buttonMarkup;\r\n};\r\n\r\nconst renderButtons = (page, numResults, resPerPage) => {\r\n  const pages = Math.ceil(numResults / resPerPage);\r\n  let button;\r\n\r\n  if (page === 1 && pages > 1) {\r\n    // Button to go to next page\r\n    button = `\r\n    ${createButton(page, 'hidden')}\r\n    ${createButton(page, 'next')}\r\n    `;\r\n  } else if (page < pages) {\r\n    // Both buttons\r\n    button = `\r\n    ${createButton(page, 'prev')}\r\n    ${createButton(page, 'next')}\r\n    `;\r\n  } else if (page === pages && pages > 1) {\r\n    // Button to go to previous page\r\n    button = createButton(page, 'prev');\r\n  }\r\n\r\n  elements.searchResultPages.insertAdjacentHTML('afterbegin', button);\r\n};\r\n\r\nconst renderRecipe = (currRecipe) => {\r\n  const markup = `\r\n          <li class=\"glass\">\r\n            <a class=\"results__link\" href=\"#${currRecipe.id}\">\r\n              <figure class=\"results__fig\">\r\n                <img src=\"${currRecipe.image_url}\" alt=\"${currRecipe.title}\">\r\n              </figure>\r\n              <div class=\"results__data\">\r\n                <h4 class=\"results__name\">${limitTitle(currRecipe.title)}</h4>\r\n                <p class=\"results__author\">${currRecipe.publisher}</p>\r\n              </div>\r\n            </a>\r\n          </li>\r\n          `;\r\n\r\n  elements.searchResultList.insertAdjacentHTML('beforeend', markup);\r\n};\r\n\r\nexport const renderResults = (recipesArr, page = 1, resPerPage = 8) => {\r\n  // Redner results of current page\r\n  const start = (page - 1) * resPerPage;\r\n  const end = page * resPerPage;\r\n\r\n  recipesArr.slice(start, end).forEach((curr) => renderRecipe(curr));\r\n\r\n  // Render pagination buttons\r\n  renderButtons(page, recipesArr.length, resPerPage);\r\n};\r\n","import { key } from './config';\r\n\r\nconst evalString = (string) => {\r\n  return Function('\"use strict\";return (' + string + ')')();\r\n};\r\n\r\nexport default class Recipe {\r\n  constructor(id) {\r\n    this.id = id;\r\n  }\r\n\r\n  async getRecipe() {\r\n    try {\r\n      const res = await fetch(\r\n        `https://forkify-api.herokuapp.com/api/v2/recipes/${this.id}?key=${key}`\r\n      );\r\n\r\n      const data = await res.json();\r\n\r\n      this.title = data.data.recipe.title;\r\n      this.author = data.data.recipe.publisher;\r\n      this.img = data.data.recipe.image_url;\r\n      this.url = data.data.recipe.source_url;\r\n      this.ingredients = data.data.recipe.ingredients;\r\n      this.time = data.data.recipe.cooking_time;\r\n      this.servings = data.data.recipe.servings;\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  }\r\n\r\n  parseIngredients() {\r\n    const newIngredients = this.ingredients.map((el) => {\r\n      // 1) Uniform units\r\n      let ingredient = el.description.toLowerCase();\r\n\r\n      // 2) Remove parentheses\r\n      ingredient = ingredient.replace(/ *\\([^)]*\\) */g, ' ');\r\n\r\n      let ingObj;\r\n\r\n      // There is BOTH a quantity and a unit\r\n      if (el.quantity != null) {\r\n        ingObj = {\r\n          count: el.quantity,\r\n          unit: el.unit,\r\n          ingredient: ingredient,\r\n        };\r\n      } else {\r\n        ingObj = {\r\n          count: 1,\r\n          unit: el.unit,\r\n          ingredient: ingredient,\r\n        };\r\n      }\r\n\r\n      return ingObj;\r\n    });\r\n\r\n    this.ingredients = newIngredients;\r\n  }\r\n}\r\n","import { elements } from './base';\r\n\r\nexport const clearRecipe = () => (elements.recipe.innerHTML = '');\r\n\r\nconst createIngredient = (ingredient) => `\r\n            <li class=\"recipe__item\">\r\n                <i class='bx bxs-check-square recipe__icon' ></i>\r\n                <div class=\"recipe__count\">${ingredient.count}</div>\r\n                <div class=\"recipe__ingredient\">\r\n                     <span class=\"recipe__unit\">${ingredient.unit}</span>\r\n                    ${ingredient.ingredient}\r\n                </div>\r\n            </li>\r\n`;\r\n\r\nexport const renderRecipe = (recipe, isLiked) => {\r\n  const markup = `\r\n            <figure class=\"recipe__fig\">\r\n                <img src=\"${recipe.img}\" alt=\"${recipe.title}\" class=\"recipe__img\">\r\n                <h1 class=\"recipe__title\">\r\n                    <span>${recipe.title}</span>\r\n                </h1>\r\n            </figure>\r\n\r\n            <div class=\"recipe__details\">\r\n                <div class=\"recipe__info\">\r\n                    <i class='bx bxs-time-five' ></i>\r\n                    <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.time}</span>\r\n                    <span class=\"recipe__info-text\"> minutes</span>\r\n                </div>\r\n                <div class=\"recipe__info\">\r\n                    <i class='bx bxs-user'></i>\r\n                    <span class=\"recipe__info-data recipe__info-data--people\">${\r\n                      recipe.servings\r\n                    }</span>\r\n                    <span class=\"recipe__info-text\"> servings</span>\r\n\r\n                </div>\r\n                <button class=\"recipe__love\">\r\n                    <i class=\"bx ${isLiked ? 'bxs' : 'bx'}-heart\" ></i>\r\n                </button>\r\n            </div>\r\n\r\n            <div class=\"recipe__ingredients\">\r\n                <ul class=\"recipe__ingredient-list\">\r\n                    ${recipe.ingredients.map((el) => createIngredient(el)).join('')}\r\n                </ul>\r\n            </div>\r\n\r\n            <div class=\"recipe__directions\">\r\n                <h2 class=\"heading-2\">How to cook it</h2>\r\n                <p class=\"recipe__directions-text\">\r\n                    This recipe was created by\r\n                    <span class=\"recipe__by\">${\r\n                      recipe.author\r\n                    }</span>. Find out more details about the recipe below.\r\n                </p>\r\n                <a class=\"btn-small recipe__btn\" href=\"${recipe.url}\" target=\"_blank\">\r\n                    <span>Directions</span>\r\n                    <i class='bx bxs-book-content'></i>\r\n                </a>\r\n            </div>\r\n    `;\r\n\r\n  elements.recipe.classList.add('glass');\r\n  elements.recipe.insertAdjacentHTML('afterbegin', markup);\r\n};\r\n","export default class Like {\r\n  constructor() {\r\n    this.likes = [];\r\n  }\r\n\r\n  addLike(id, title, author, img) {\r\n    const like = {\r\n      id,\r\n      title,\r\n      author,\r\n      img,\r\n    };\r\n\r\n    this.likes.push(like);\r\n\r\n    // Persist data in localStorage\r\n    this.persistData();\r\n\r\n    return like;\r\n  }\r\n\r\n  deleteLike(id) {\r\n    const index = this.likes.findIndex((curr) => curr.id === id);\r\n    this.likes.splice(index, 1);\r\n\r\n    // Persist data in localStorage\r\n    this.persistData();\r\n  }\r\n\r\n  isLiked(id) {\r\n    return this.likes.findIndex((curr) => curr.id === id) !== -1;\r\n  }\r\n\r\n  getNumLikes() {\r\n    return this.likes.length;\r\n  }\r\n\r\n  persistData() {\r\n    localStorage.setItem('like', JSON.stringify(this.likes));\r\n  }\r\n\r\n  readStorage() {\r\n    const storage = JSON.parse(localStorage.getItem('like'));\r\n\r\n    // Restore likes from the local storage\r\n    if (storage) this.likes = storage;\r\n  }\r\n}\r\n","import { elements } from './base';\r\nimport { limitTitle } from './searchView';\r\n\r\nexport const toggleLikeBtn = (isLiked) => {\r\n  const iconString = isLiked ? 'bxs' : 'bx';\r\n  // Can select a certain child element of a parent element like '.recipe__love use'\r\n  document.querySelector('.recipe__love i').setAttribute('class', `bx ${iconString}-heart`);\r\n};\r\n\r\nexport const toggleLikeMenu = (numLikes) => {\r\n  elements.likeMenu.style.visibility = numLikes > 0 ? 'visible' : 'hidden';\r\n};\r\n\r\nexport const renderLike = (like) => {\r\n  const markup = `\r\n        <li>\r\n            <a class=\"likes__link glass\" href=\"#${like.id}&like\" >\r\n                <figure class=\"likes__fig\">\r\n                    <img src=\"${like.img}\" alt=\"Liked Recipe Image\">\r\n                </figure>\r\n                <div class=\"likes__data\">\r\n                    <h4 class=\"likes__name\">${limitTitle(like.title)}</h4>\r\n                    <p class=\"likes__author\">${like.author}</p>\r\n                </div>\r\n            </a>\r\n        </li>\r\n    `;\r\n\r\n  elements.likeList.insertAdjacentHTML('beforeend', markup);\r\n};\r\n\r\nexport const deleteLikeItem = (id) => {\r\n  const element = document.querySelector(`.likes__link[href='#${id}&like']`).parentElement;\r\n  if (element) element.parentElement.removeChild(element);\r\n};\r\n","import { elements } from './base';\r\n\r\nexport default class UserRecipe {\r\n  constructor() {\r\n    this.userRecipes = [];\r\n    this.count = 0;\r\n    this.readStorage();\r\n  }\r\n\r\n  toggleUserRecipe() {\r\n    elements.recipeOverlay.classList.toggle('hidden');\r\n    elements.recipeWindow.classList.toggle('hidden');\r\n  }\r\n\r\n  readStorage() {\r\n    const storage = JSON.parse(localStorage.getItem('userRecipe'));\r\n\r\n    // Restore userRecipes from the local storage\r\n    if (storage) this.userRecipes = storage;\r\n  }\r\n}\r\n","import { elements, renderLoader, clearLoader } from './base';\r\nimport { limitTitle } from './searchView';\r\nimport * as recipeView from './recipeView';\r\n\r\nexport const renderUserListItem = (recipe) => {\r\n  const markup = `\r\n        <li>\r\n            <a class=\"likes__link glass\" href=\"#recipe${recipe.id}\" >\r\n                <figure class=\"likes__fig\">\r\n                    <img src=\"cookUserImg.png\" alt=\"User Recipe Image\">\r\n                </figure>\r\n                <div class=\"likes__data\">\r\n                    <h4 class=\"likes__name\">${limitTitle(recipe.title)}</h4>\r\n                    <p class=\"likes__author\">${recipe.publisher}</p>\r\n                </div>\r\n            </a>\r\n        </li>\r\n    `;\r\n\r\n  elements.userList.insertAdjacentHTML('beforeend', markup);\r\n};\r\n\r\nexport function submitUserRecipe(event) {\r\n  try {\r\n    event.preventDefault();\r\n\r\n    // Get all the form data\r\n    const formDataArr = [...new FormData(this)];\r\n\r\n    // Get the ingredients section only and split them into parts\r\n    const ingredients = formDataArr.filter((input) => {\r\n      return input[0].startsWith('ingredient') && input[1] !== '';\r\n    });\r\n\r\n    const ingredientsSplit = ingredients.map((ing) => {\r\n      const ingArr = ing[1].split(',');\r\n\r\n      if (ingArr.length !== 3) throw new Error('Ingredient input invalid!');\r\n\r\n      return ingArr;\r\n    });\r\n\r\n    // Get the form data as an object and get the neccessary info\r\n    const newRecipe = Object.fromEntries(formDataArr);\r\n\r\n    const recipe = {\r\n      title: newRecipe.title,\r\n      publisher: newRecipe.publisher,\r\n      cooking_time: +newRecipe.cookingTime,\r\n      servings: +newRecipe.servings,\r\n      ingredients: ingredientsSplit,\r\n      id: (Date.now() + '').slice(-10),\r\n    };\r\n\r\n    // Render the newly added recipe\r\n    const markup = `\r\n        <li>\r\n            <a class=\"likes__link glass\" href=\"#recipe${recipe.id}\" >\r\n                <figure class=\"likes__fig\">\r\n                    <img src=\"cookUserImg.bc82236c.png\" alt=\"User Recipe Image\">\r\n                </figure>\r\n                <div class=\"likes__data\">\r\n                    <h4 class=\"likes__name\">${limitTitle(recipe.title)}</h4>\r\n                    <p class=\"likes__author\">${recipe.publisher}</p>\r\n                </div>\r\n            </a>\r\n        </li>\r\n    `;\r\n\r\n    elements.userList.insertAdjacentHTML('beforeend', markup);\r\n\r\n    // Check if there are user recipes in localstorage and add it\r\n    let allUserRecipes = JSON.parse(localStorage.getItem('userRecipe'));\r\n\r\n    if (allUserRecipes) {\r\n      allUserRecipes.push(recipe);\r\n    } else {\r\n      allUserRecipes = [recipe];\r\n    }\r\n\r\n    localStorage.setItem('userRecipe', JSON.stringify(allUserRecipes));\r\n\r\n    // Remove the overlay and form\r\n    elements.recipeOverlay.classList.toggle('hidden');\r\n    elements.recipeWindow.classList.toggle('hidden');\r\n\r\n    // Clear the inputs in the form\r\n    elements.allInputs.forEach((input) => (input.value = ''));\r\n  } catch (error) {\r\n    window.alert(error);\r\n  }\r\n}\r\n\r\nexport const displayUserRecipe = (id) => {\r\n  const allUserRecipes = JSON.parse(localStorage.getItem('userRecipe'));\r\n\r\n  const recipe = allUserRecipes.find((recipe) => {\r\n    return recipe.id === id;\r\n  });\r\n\r\n  // Prepare the UI for changes\r\n  recipeView.clearRecipe();\r\n  renderLoader(elements.recipe);\r\n\r\n  renderUserRecipeDetails(recipe);\r\n};\r\n\r\nconst createIngredient = (ingredient) => `\r\n            <li class=\"recipe__item\">\r\n                <i class='bx bxs-check-square recipe__icon' ></i>\r\n                <div class=\"recipe__count\">${ingredient[0]}</div>\r\n                <div class=\"recipe__ingredient\">\r\n                     <span class=\"recipe__unit\">${ingredient[1]}</span>\r\n                    ${ingredient[2]}\r\n                </div>\r\n            </li>\r\n`;\r\n\r\nexport const renderUserRecipeDetails = (recipe) => {\r\n  const markup = `\r\n              <figure class=\"recipe__fig\">\r\n                  <img src=\"cookUserImg.png\" class=\"recipe__img user__recipe__img\">\r\n                  <h1 class=\"recipe__title\">\r\n                      <span>${recipe.title}</span>\r\n                  </h1>\r\n              </figure>\r\n\r\n              <div class=\"recipe__details\">\r\n                  <div class=\"recipe__info\">\r\n                      <i class='bx bxs-time-five' ></i>\r\n                      <span class=\"recipe__info-data recipe__info-data--minutes\">${\r\n                        recipe.cooking_time\r\n                      }</span>\r\n                      <span class=\"recipe__info-text\"> minutes</span>\r\n                  </div>\r\n                  <div class=\"recipe__info\">\r\n                      <i class='bx bxs-user'></i>\r\n                      <span class=\"recipe__info-data recipe__info-data--people\">${\r\n                        recipe.servings\r\n                      }</span>\r\n                      <span class=\"recipe__info-text\"> servings</span>\r\n\r\n                  </div>\r\n\r\n                  <div class=\"user__publisher\">\r\n                      <p>By <span class=\"user__publisher__name\">${recipe.publisher}</span></p>\r\n                  </div>\r\n              </div>\r\n\r\n              <div class=\"recipe__ingredients user__ingredients\">\r\n                  <ul class=\"recipe__ingredient-list user__ingredients__list\">\r\n                      ${recipe.ingredients.map((ingr) => createIngredient(ingr)).join('')}\r\n                  </ul>\r\n              </div>\r\n      `;\r\n\r\n  elements.recipe.classList.add('glass');\r\n  elements.recipe.insertAdjacentHTML('afterbegin', markup);\r\n  clearLoader();\r\n};\r\n","import Search from './Search';\r\nimport * as searchView from './searchView';\r\nimport Recipe from './Recipe';\r\nimport * as recipeView from './recipeView';\r\nimport Like from './Like';\r\nimport * as likeView from './likeView';\r\nimport { elements, elementStrings, renderLoader, clearLoader } from './base';\r\nimport UserRecipe from './userRecipe';\r\nimport * as userView from './userRecipeView';\r\n\r\n/** Global state of the app\r\n * - Search object\r\n * - Current recipe object\r\n * - Liked recipes\r\n */\r\n\r\nconst state = {};\r\n\r\n// The user SEARCHES for a keyword in the recipe bar\r\nelements.searchForm.addEventListener('submit', (event) => {\r\n  // Prevent default action from occuring, in this case it prevent reloading the page\r\n  // submitting a form.\r\n  event.preventDefault();\r\n  controlSearch();\r\n});\r\n\r\n// Render the PREV or NEXT page of results from the recipe result list\r\nelements.searchResultPages.addEventListener('click', (event) => {\r\n  const btn = event.target.closest(`.${elementStrings.btn_inline}`);\r\n  if (btn) {\r\n    const goToPage = parseInt(btn.dataset.goto);\r\n    searchView.clearResults();\r\n    searchView.renderResults(state.search.results, goToPage);\r\n  }\r\n});\r\n\r\n/**\r\n * SEARCH CONTROLLER\r\n */\r\nconst controlSearch = async () => {\r\n  // 1) Get query from view\r\n  const query = searchView.getInput();\r\n\r\n  if (query) {\r\n    // 2) New search object and add to state\r\n    state.search = new Search(query);\r\n\r\n    // 3) Prepare UI for results\r\n    searchView.clearInput();\r\n    searchView.clearResults();\r\n    renderLoader(elements.searchResult);\r\n\r\n    try {\r\n      // 4) Search for recipes\r\n      await state.search.getResults();\r\n\r\n      // 5) Render results on UI\r\n      clearLoader();\r\n      searchView.renderResults(state.search.results);\r\n    } catch (error) {\r\n      clearLoader();\r\n      alert(error);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * LIKE CONTROLLER\r\n */\r\nconst controlLike = () => {\r\n  if (!state.like) state.like = new Like();\r\n\r\n  const currentID = state.recipe.id;\r\n\r\n  // User has not yet liked current recipe\r\n  if (!state.like.isLiked(currentID)) {\r\n    // Add like to the state\r\n    const newLike = state.like.addLike(\r\n      currentID,\r\n      state.recipe.title,\r\n      state.recipe.author,\r\n      state.recipe.img\r\n    );\r\n\r\n    // Toggle the like button\r\n    likeView.toggleLikeBtn(true);\r\n\r\n    // Add like to UI list\r\n    likeView.renderLike(newLike);\r\n\r\n    // User HAS liked current recipe\r\n  } else {\r\n    // Remove like from the state\r\n    state.like.deleteLike(currentID);\r\n\r\n    // Toggle the like button\r\n    likeView.toggleLikeBtn(false);\r\n\r\n    // Remove like from UI list\r\n    likeView.deleteLikeItem(currentID);\r\n  }\r\n\r\n  likeView.toggleLikeMenu(state.like.getNumLikes());\r\n};\r\n\r\n// Handling the LIKE button clicks\r\nelements.recipe.addEventListener('click', (event) => {\r\n  if (event.target.matches('.recipe__love, .recipe__love *')) {\r\n    // Add to liked recipe\r\n    controlLike();\r\n  }\r\n});\r\n\r\n/**\r\n * NEW USER RECIPE CONTROLLER\r\n */\r\nconst controlUserRecipe = () => {\r\n  state.userRecipe = new UserRecipe();\r\n\r\n  // Show the form to enter the user recipe\r\n  state.userRecipe.toggleUserRecipe();\r\n\r\n  // Event handler for exiting out of the recipe form\r\n  [elements.closeUserRecipe, elements.recipeOverlay].forEach((elem) =>\r\n    elem.addEventListener('click', state.userRecipe.toggleUserRecipe)\r\n  );\r\n\r\n  // Event handler for submmitting the recipe and rendering the new recipe\r\n  elements.userRecipeForm.addEventListener('submit', userView.submitUserRecipe);\r\n};\r\n\r\n// Event handler for clicking on the upload button for user recipes\r\nelements.addRecipeBtn.addEventListener('click', controlUserRecipe);\r\n\r\n// Event handler to restore liked recipes AND user recipes on page load\r\nwindow.addEventListener('load', () => {\r\n  state.like = new Like();\r\n  state.userRecipe = new UserRecipe();\r\n\r\n  // Restore likes and user recipes (in constructor)\r\n  state.like.readStorage();\r\n\r\n  // Toggle like menu button\r\n  likeView.toggleLikeMenu(state.like.getNumLikes());\r\n\r\n  // Render the existing likes and user recipes\r\n  state.like.likes.forEach((curr) => likeView.renderLike(curr));\r\n  state.userRecipe.userRecipes.forEach((curr) => userView.renderUserListItem(curr));\r\n});\r\n\r\n/**\r\n * RECIPE CONTROLLER\r\n */\r\n// DISPLAY the recipe selected using the hash key from the url\r\nconst controlRecipe = async (e) => {\r\n  // Get url from window and split it\r\n  const url = window.location.hash;\r\n\r\n  if (url.includes('#recipe')) {\r\n    // When the user clicks on the user recipe, get the ID and render it\r\n    const userRecipeID = url.split('#recipe')[1];\r\n\r\n    userView.displayUserRecipe(userRecipeID);\r\n  } else if (url.includes('#')) {\r\n    const inputs = url.split('#')[1];\r\n    const splitInputs = inputs.split('&');\r\n    const id = splitInputs[0];\r\n    const liked = splitInputs[1];\r\n\r\n    if (id) {\r\n      // Prepare the UI for changes\r\n      recipeView.clearRecipe();\r\n      renderLoader(elements.recipe);\r\n\r\n      // Highlight selected search item\r\n      if (state.search && !liked) searchView.highlightSelected(id);\r\n\r\n      // Create new recipe object\r\n      state.recipe = new Recipe(id);\r\n\r\n      try {\r\n        // Get recipe data\r\n        await state.recipe.getRecipe();\r\n        state.recipe.parseIngredients();\r\n\r\n        // Render recipe\r\n        clearLoader();\r\n        recipeView.renderRecipe(state.recipe, state.like.isLiked(id));\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Render the SELECTED when the user clicks on the recipe using the hash value\r\n['hashchange', 'load'].forEach((event) => window.addEventListener(event, controlRecipe));\r\n"],"names":["$f8919b4807a0aa5c5919e2396712cf32$export$default","constructor","query","this","res","fetch","data","json","results","recipes","error","alert","$32f79020b4a83d63d9c6a38da3658a87$export$elements","searchForm","document","querySelector","searchInput","searchResultList","searchResult","searchResultPages","recipe","likeIcon","likeMenu","likeList","addRecipeBtn","recipeWindow","recipeOverlay","closeUserRecipe","userRecipeForm","userList","allInputs","querySelectorAll","$32f79020b4a83d63d9c6a38da3658a87$export$elementStrings","$32f79020b4a83d63d9c6a38da3658a87$export$renderLoader","parent","loader","insertAdjacentHTML","$32f79020b4a83d63d9c6a38da3658a87$export$clearLoader","parentElement","removeChild","$e6fa4c718fd17961f25f7f8e006e7cad$export$clearResults","innerHTML","$e6fa4c718fd17961f25f7f8e006e7cad$export$limitTitle","title","limit","newTitle","length","split","reduce","acc","curr","push","join","$e6fa4c718fd17961f25f7f8e006e7cad$var$createButton","page","type","buttonMarkup","$e6fa4c718fd17961f25f7f8e006e7cad$export$renderResults","recipesArr","resPerPage","start","end","slice","forEach","currRecipe","markup","id","image_url","publisher","$e6fa4c718fd17961f25f7f8e006e7cad$var$renderRecipe","numResults","pages","Math","ceil","button","$e6fa4c718fd17961f25f7f8e006e7cad$var$renderButtons","$f52761c9ae54d1235e5010e15ca6ffcb$export$default","author","img","url","source_url","ingredients","time","cooking_time","servings","parseIngredients","newIngredients","map","el","ingObj","ingredient","description","toLowerCase","replace","quantity","count","unit","$b8ab326a38f56f024e3b689d72a2af72$export$clearRecipe","$cddbe06ad95a7a60e6c41b542467903b$export$default","likes","addLike","like","persistData","deleteLike","index","findIndex","splice","isLiked","getNumLikes","localStorage","setItem","JSON","stringify","readStorage","storage","parse","getItem","$1db156ee2895b0d6244060b9ed5702e5$export$toggleLikeBtn","iconString","setAttribute","$1db156ee2895b0d6244060b9ed5702e5$export$toggleLikeMenu","numLikes","style","visibility","$1db156ee2895b0d6244060b9ed5702e5$export$renderLike","$6e16c3a6bf40daa091ce1064d8085ad8$export$default","userRecipes","toggleUserRecipe","classList","toggle","$dd5001a73d88b2461f817efeb325d0f2$export$submitUserRecipe","event","preventDefault","formDataArr","FormData","ingredientsSplit","filter","input","startsWith","ing","ingArr","Error","newRecipe","Object","fromEntries","cookingTime","Date","now","allUserRecipes","value","window","$dd5001a73d88b2461f817efeb325d0f2$export$renderUserRecipeDetails","ingr","$dd5001a73d88b2461f817efeb325d0f2$var$createIngredient","add","$d6b9f3b7bb422303e34961b12f2cabef$var$state","addEventListener","$d6b9f3b7bb422303e34961b12f2cabef$var$controlSearch","btn","target","closest","goToPage","parseInt","dataset","goto","search","async","getResults","$d6b9f3b7bb422303e34961b12f2cabef$var$controlLike","currentID","element","newLike","matches","userRecipe","elem","$d6b9f3b7bb422303e34961b12f2cabef$var$controlRecipe","location","hash","includes","find","splitInputs","liked","Array","from","remove","getRecipe","$b8ab326a38f56f024e3b689d72a2af72$var$createIngredient"],"version":3,"file":"index.996e4238.js.map"}