var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "renderUserListItem", function () {
  return renderUserListItem;
});
_parcelHelpers.export(exports, "submitUserRecipe", function () {
  return submitUserRecipe;
});
_parcelHelpers.export(exports, "displayUserRecipe", function () {
  return displayUserRecipe;
});
_parcelHelpers.export(exports, "renderUserRecipeDetails", function () {
  return renderUserRecipeDetails;
});
var _base = require('./base');
var _searchView = require('./searchView');
var _recipeView = require('./recipeView');
const renderUserListItem = recipe => {
  const markup = `
        <li>
            <a class="likes__link glass" href="#recipe${recipe.id}" >
                <figure class="likes__fig">
                    <img src="cookUserImg.bc82236c.png" alt="User Recipe Image">
                </figure>
                <div class="likes__data">
                    <h4 class="likes__name">${_searchView.limitTitle(recipe.title)}</h4>
                    <p class="likes__author">${recipe.publisher}</p>
                </div>
            </a>
        </li>
    `;
  _base.elements.userList.insertAdjacentHTML('beforeend', markup);
};
function submitUserRecipe(event) {
  event.preventDefault();
  // Get all the form data
  const formDataArr = [...new FormData(this)];
  // Get the ingredients section only and split them into parts
  const ingredients = formDataArr.filter(input => {
    return input[0].startsWith('ingredient') && input[1] !== '';
  });
  const ingredientsSplit = ingredients.map(ing => {
    const ingArr = ing[1].replaceAll(' ', '').split(',');
    if (ingArr.length !== 3) throw new Error('Ingredient input invalid!');
    return ingArr;
  });
  // Get the form data as an object and get the neccessary info
  const newRecipe = Object.fromEntries(formDataArr);
  const recipe = {
    title: newRecipe.title,
    publisher: newRecipe.publisher,
    cooking_time: +newRecipe.cookingTime,
    servings: +newRecipe.servings,
    ingredients: ingredientsSplit,
    id: (Date.now() + '').slice(-10)
  };
  // Render the newly added recipe
  const markup = `
        <li>
            <a class="likes__link glass" href="#recipe${recipe.id}" >
                <figure class="likes__fig">
                    <img src="cookUserImg.bc82236c.png" alt="User Recipe Image">
                </figure>
                <div class="likes__data">
                    <h4 class="likes__name">${_searchView.limitTitle(recipe.title)}</h4>
                    <p class="likes__author">${recipe.publisher}</p>
                </div>
            </a>
        </li>
    `;
  _base.elements.userList.insertAdjacentHTML('beforeend', markup);
  // Check if there are user recipes in localstorage and add it
  let allUserRecipes = JSON.parse(localStorage.getItem('userRecipe'));
  if (allUserRecipes) {
    allUserRecipes.push(recipe);
  } else {
    allUserRecipes = [recipe];
  }
  localStorage.setItem('userRecipe', JSON.stringify(allUserRecipes));
}
const displayUserRecipe = id => {
  const allUserRecipes = JSON.parse(localStorage.getItem('userRecipe'));
  const recipe = allUserRecipes.find(recipe => {
    return recipe.id === id;
  });
  console.log('HERE', recipe);
  // Prepare the UI for changes
  _recipeView.clearRecipe();
  _base.renderLoader(_base.elements.recipe);
  renderUserRecipeDetails(recipe);
};
const createIngredient = ingredient => `
            <li class="recipe__item">
                <i class='bx bxs-check-square recipe__icon' ></i>
                <div class="recipe__count">${ingredient.count}</div>
                <div class="recipe__ingredient">
                     <span class="recipe__unit">${ingredient.unit}</span>
                    ${ingredient.ingredient}
                </div>
            </li>
`;
const renderUserRecipeDetails = recipe => {
  const markup = `
              <figure class="recipe__fig">
                  <img src="cookUserImg.bc82236c.png" class="recipe__img user__recipe__img">
                  <h1 class="recipe__title">
                      <span>${recipe.title}</span>
                  </h1>
              </figure>

              <div class="recipe__details">
                  <div class="recipe__info">
                      <i class='bx bxs-time-five' ></i>
                      <span class="recipe__info-data recipe__info-data--minutes">${recipe.cooking_time}</span>
                      <span class="recipe__info-text"> minutes</span>
                  </div>
                  <div class="recipe__info">
                      <i class='bx bxs-user'></i>
                      <span class="recipe__info-data recipe__info-data--people">${recipe.servings}</span>
                      <span class="recipe__info-text"> servings</span>

                  </div>
                  <button class="recipe__love">
                      <i class="bx ${'bx'}-heart" ></i>
                  </button>
              </div>

              <div class="recipe__ingredients">
                  <ul class="recipe__ingredient-list">
                      ${recipe.ingredients.map(el => createIngredient(el)).join('')}
                  </ul>
              </div>
      `;
  _base.elements.recipe.classList.add('glass');
  _base.elements.recipe.insertAdjacentHTML('afterbegin', markup);
};
